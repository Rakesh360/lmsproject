from django.shortcuts import render, redirect, HttpResponse

from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
from rest_framework.views import APIView
from rest_framework.authentication import SessionAuthentication, BasicAuthentication
from django.utils import timezone

from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from django.conf import settings
from django.contrib.auth import logout,authenticate, login
from django.core.paginator import Paginator, PageNotAnInteger

from EasyHireApp.models import *
from EasyHireApp.utils import *
from EasyHireApp.constants import *
from datetime import datetime
import base64
import logging
import threading
import sys

logger = logging.getLogger(__name__)


def AdministratorLoginPage(request):
    if is_user_authenticated(request):
        return redirect("/")
    else:
        return render(request, 'EasyHireApp/employee-login.html')

def AdministratorAuthentication(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error. Please try again later.",
        "is_registered": False
    }
    try:
        if request.method == "POST":
            if is_user_authenticated(request):
                logger.info(request.user.role)
                if request.user.role == "1":
                    return redirect("/applicant/dashboard")
                elif request.user.role == "3":
                    return redirect("/master-list/create-applicants")
                else:
                    return redirect("/administrator/manage-applicants")

            data = request.POST["data"]
            json_data = json.loads(data)
            username = json_data["username"]
            password = json_data["password"]

            administrator_objs = Administrator.objects.filter(username=username)

            if len(administrator_objs) > 0:
                user = authenticate(username=username, password=password)
                login(request, user)
                administrator_obj = Administrator.objects.get(username=username)
                administrator_obj.is_active = True
                administrator_obj.save()
                response["status_code"] = 200
                response["status_message"] = "SUCCESS"
            else:
                response["status_code"] = 405
                response["status_message"] = "Unauthorized user"
    except Exception as e:
        logger.error("AdministratorAuthentication: "+str(e))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def ManageApplicantsPage(request):
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            master_quiz_objs = Quiz.objects.all()
            #master_institutes_objs = Institute.objects.all()
            master_stream_objs = Stream.objects.all()
            master_event_objs = Event.objects.all()
            master_department_objs = Department.objects.all()
            filter_list = []
            applicant_objs = []
            list_of_sets_objs = []

            applicant_objs = Applicant.objects.all()

            campus_applicant_objs = []
            if "is_campus" in request.GET and request.GET["is_campus"] == "True":
                campus_applicant_objs = get_list_of_campus_applicants(Applicant)
                list_of_sets_objs.append(set(campus_applicant_objs))
                filter_list.append("4")

            walkin_applicant_objs = []
            if "is_walkin" in request.GET and request.GET["is_walkin"] == "True":
                walkin_applicant_objs = get_list_of_walkin_applicants(Applicant)
                list_of_sets_objs.append(set(walkin_applicant_objs))
                filter_list.append("5")

            posting_applicant_objs = []
            if "is_posting" in request.GET and request.GET["is_posting"] == "True":
                posting_applicant_objs = get_list_of_posting_applicants(Applicant)
                list_of_sets_objs.append(set(posting_applicant_objs))
                filter_list.append("6")

            rejected_applicant_objs = []
            if "is_rejected" in request.GET and request.GET["is_rejected"] == "True":
                rejected_applicant_objs = get_list_of_rejected_applicants(Applicant)
                list_of_sets_objs.append(set(rejected_applicant_objs))
                filter_list.append("1")

            selected_applicant_objs = []
            if "is_selected" in request.GET and request.GET["is_selected"] == "True":
                selected_applicant_objs = get_list_of_selected_applicants(
                    Applicant)
                list_of_sets_objs.append(set(selected_applicant_objs))
                filter_list.append("2")

            nonapproved_applicant_objs = []
            if "is_nonapproved" in request.GET and request.GET["is_nonapproved"] == "True":
                nonapproved_applicant_objs = get_list_of_non_approved_applicants(
                    Applicant)
                list_of_sets_objs.append(set(nonapproved_applicant_objs))
                filter_list.append("3")
            male_applicant_objs = []
            if "is_male" in request.GET and request.GET["is_male"] == "True":
                male_applicant_objs = Applicant.objects.filter(gender="1")
                list_of_sets_objs.append(set(male_applicant_objs))
                filter_list.append("7")

            female_applicant_objs = []
            if "is_female" in request.GET and request.GET["is_female"] == "True":
                female_applicant_objs = Applicant.objects.filter(gender="2")
                list_of_sets_objs.append(set(female_applicant_objs))
                filter_list.append("8")

            others_applicant_objs = []
            if "is_others" in request.GET and request.GET["is_others"] == "True":
                others_applicant_objs = Applicant.objects.filter(gender="2")
                list_of_sets_objs.append(set(others_applicant_objs))
                filter_list.append("9")
            """
            institute_filter_list = []
            institutes_applicant_objs = []
            if "institute" in request.GET:
                institute_pk_list = request.GET.getlist("institute")
                institutes_objs = []
                for institute_pk in institute_pk_list:
                    institutes_objs.append(
                        Institute.objects.get(pk=int(institute_pk)))
                    institute_filter_list.append(int(institute_pk))
                institutes_applicant_objs = get_list_of_applicants_for_given_institute(
                    Applicant, institutes_objs)
                list_of_sets_objs.append(set(institutes_applicant_objs))
            quiz_filter_list = []
            quiz_applicant_objs = []
            if "quiz" in request.GET:
                quiz_pk_list = request.GET.getlist("quiz")
                quiz_objs = []
                for quiz_pk in quiz_pk_list:
                    quiz_objs.append(Quiz.objects.get(pk=int(quiz_pk)))
                    quiz_filter_list.append(int(quiz_pk))
                list_of_sets_objs.append(set(quiz_applicant_objs))
            """

            department_filter_list = []
            department_applicants_objs = []
            if "department" in request.GET:
                department_pk_list = request.GET.getlist("department")
                department_objs = []
                for department_pk in department_pk_list:
                    department_objs.append(Department.objects.get(pk=int(department_pk)))
                    department_filter_list.append(int(department_pk))
                for department_obj in department_objs:
                    applicant_objs = Applicant.objects.filter(department=department_obj)
                    for applicant_obj in applicant_objs:
                        department_applicants_objs.append(applicant_obj)
                list_of_sets_objs.append(set(department_applicants_objs))
            stream_filter_list = []
            stream_applicant_objs = []
            if "stream" in request.GET:
                stream_pk_list = request.GET.getlist("stream")
                stream_objs = []
                for stream_pk in stream_pk_list:
                    stream_objs.append(
                        Stream.objects.get(pk=int(stream_pk)))
                    stream_filter_list.append(int(stream_pk))
                stream_applicant_objs = get_list_of_applicants_for_given_stream(
                    Applicant, stream_objs)
                list_of_sets_objs.append(set(stream_applicant_objs))

            quiz_filter_list = []
            quiz_applicant_objs = []
            quiz_status_objs = []
            if "quiz" in request.GET:
                quiz_pk_list = request.GET.getlist("quiz")
                quiz_objs = []
                for quiz_pk in quiz_pk_list:
                    quiz_objs.append(Quiz.objects.get(pk=int(quiz_pk)))
                    quiz_filter_list.append(int(quiz_pk))
                for quiz_obj in quiz_objs:
                    quiz_status_objs = QuizStatus.objects.filter(quiz=quiz_obj)
                    for quiz_status_obj in quiz_status_objs:
                        applicant_obj = quiz_status_obj.applicant
                        quiz_applicant_objs.append(applicant_obj)
                list_of_sets_objs.append(set(quiz_applicant_objs))
            event_filter_list = []
            event_applicants_objs = []
            if "event" in request.GET:
                event_pk_list = request.GET.getlist("event")
                event_objs = []
                for event_pk in event_pk_list:
                    event_objs.append(Event.objects.get(pk=int(event_pk)))
                    event_filter_list.append(int(event_pk))
                for event_obj in event_objs:
                    applicant_objs = Applicant.objects.filter(event=event_obj)
                    for applicant_obj in applicant_objs:
                        event_applicants_objs.append(applicant_obj)
                list_of_sets_objs.append(set(event_applicants_objs))

            date_applicant_objs = []
            start_date = ""
            if "date" in request.GET:
                start_date = request.GET["date"]
                date_format = "%Y-%m-%d"
                datetime_start = datetime.strptime(start_date, date_format).date()
                date_applicant_objs = Applicant.objects.filter(attempted_datetime__date=datetime_start)
                list_of_sets_objs.append(set(date_applicant_objs))
            else:
                if "all" in request.GET:
                    list_of_sets_objs.append(set(applicant_objs))
                    filter_list.append("10")
                elif ("is_campus" in request.GET) or ("is_walkin" in request.GET) or ("is_posting" in request.GET) \
                        or ("is_male" in request.GET) or ("is_female" in request.GET) or ("is_others" in request.GET) \
                        or ("is_selected" in request.GET) or ("is_rejected" in request.GET) or ("event" in request.GET) \
                        or ("is_nonapproved" in request.GET) or ("quiz" in request.GET) or ("group" in request.GET) \
                        or ("stream" in request.GET) or ("department" in request.GET) or ("institute" in request.GET):
                    logger.info("Apply Filter")
                else:
                    start_date = datetime.now()
                    date_format = "%Y-%m-%d"
                    datetime_start = datetime.strftime(
                        start_date, date_format)
                    start_date = datetime_start
                    date_applicant_objs = Applicant.objects.filter(
                        attempted_datetime__date=datetime_start)
                    list_of_sets_objs.append(set(date_applicant_objs))
            """
            else:
                if "all" in request.GET:
                    list_of_sets_objs.append(set(applicant_objs))
                    filter_list.append("10")
                else:
                    start_date = datetime.now()
                    date_format = "%Y-%m-%d"
                    datetime_start = datetime.strftime(start_date, date_format)
                    start_date = datetime_start
                    date_applicant_objs = Applicant.objects.filter(attempted_datetime__date=datetime_start)
                    list_of_sets_objs.append(set(date_applicant_objs))
            """
            if len(list_of_sets_objs) > 0:
                applicant_objs = list(set.intersection(*list_of_sets_objs))

            return render(request, "EasyHireApp/administrator/manage-applicants.html", {
                #"master_institutes_objs": master_institutes_objs,
                "master_quiz_objs": master_quiz_objs,
                "applicant_objs": applicant_objs,
                "filter_list": filter_list,
                #"institute_filter_list": institute_filter_list,
                "quiz_filter_list": quiz_filter_list,
                "APPLICANT_APPLICATION_STATUS": APPLICANT_APPLICATION_STATUS,
                "master_event_objs":master_event_objs,
                "event_filter_list":event_filter_list,
                "master_stream_objs":master_stream_objs,
                "stream_filter_list":stream_filter_list,
                "master_department_objs":master_department_objs,
                "department_filter_list":department_filter_list,
                "male_applicant_objs":male_applicant_objs,
                "female_applicant_objs":female_applicant_objs,
                "others_applicant_objs":others_applicant_objs,
                "start_date":start_date
            })
        elif request.user.role == "3":
            return redirect("/master-list/create-applicants")
        else:
            return redirect("/login")
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error ManageApplicantsPage: %s at %s",(e), str(exc_tb.tb_lineno))
    return HttpResponse("Invalid Access")

def AssignTask(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)
            if data["selected_next_round"] == APPLICANT_AT_QUIZ:
                quiz_obj = get_quiz_obj(
                    data["selected_quiz_for_next_round"], Quiz)
                if quiz_obj == None:
                    response["status_code"] = 101
                    response["status_message"] = "Kindly select valid quiz"
                else:
                    status, flag = schedule_applicant_quiz(applicant_objs,
                                                     data["quiz_start_date"],
                                                     data["quiz_start_time"],
                                                     data["quiz_end_date"],
                                                     data["quiz_end_time"],
                                                     quiz_obj,
                                                     QuizStatus)
                    logger.info("Assign Task")
                    logger.info(flag)
                    logger.info(status)
                    if status and flag:
                        response["status_code"] = 200
                        response["status_message"] = "Quiz has been scheduled successfully."
                    elif status == False and flag == False:
                        response["status_code"] = 101
                        response["status_message"] = "Applicant is rejected between 30 days."
                    else:
                        response["status_code"] = 101
                        response["status_message"] = "Unable to schedule quiz."
            elif data["selected_next_round"] == APPLICANT_INTERVIEW:
                status = schedule_applicant_interview(applicant_objs)
                if status:
                        response["status_code"] = 200
                        response["status_message"] = "Selected for interview"
                else:
                    response["status_code"] = 101
                    response["status_message"] = "Unable to select for Interview."
            else:
                response["status_code"] = 101
                response["status_message"] = "Invalid option"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error AssignTask: %s at %s",(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)


def AcceptedApplicant(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)

            for applicant in applicant_objs:
                applicant.is_selected = True
                applicant.save()

            response["status_code"] = 200
            response["status_message"] = "success"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)


def RejectedApplicant(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)

            for applicant in applicant_objs:
                applicant.is_rejected = True
                applicant.save()
                print(applicant)

            response["status_code"] = 200
            response["status_message"] = "success"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)


def ResetApplicantAccount(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)

            for applicant in applicant_objs:
                applicant.reset_account()

            response["status_code"] = 200
            response["status_message"] = "success"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

"""
def ApplicantReportCard(request, applicant_pk):
    if is_user_authenticated(request) and request.user.role == "2":
        applicant_obj = Applicant.objects.get(pk=int(applicant_pk))
        attempted_quiz_status_objs = applicant_obj.get_list_of_attempted_quiz()
        return render(request, 'EasyHireApp/applicant-details.html', {
            "applicant_obj": applicant_obj,
            "attempted_quiz_status_objs": attempted_quiz_status_objs,
        })
    else:
        return HttpResponse("<h5>Invalid Access</h5")
"""
def ApplicantReportCard(request, applicant_pk):
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            applicant_obj = Applicant.objects.get(pk=int(applicant_pk))
            attempted_quiz_status_objs = applicant_obj.get_list_of_attempted_quiz()
            logger.info(attempted_quiz_status_objs)
            quiz_image_list = []
            import ast
            for attempted_quiz_status_obj in attempted_quiz_status_objs:
                image_list = ast.literal_eval(attempted_quiz_status_obj.images)
                quiz_image_list.append({
                    "quiz": attempted_quiz_status_obj.quiz.title,
                    "images": image_list
                })
            return render(request, 'EasyHireApp/applicant-details.html', {
                "applicant_obj": applicant_obj,
                "attempted_quiz_status_objs": attempted_quiz_status_objs,
                "quiz_image_list": quiz_image_list
            })
        else:
            return HttpResponse("<h5>Invalid Access</h5")
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error ApplicantReportCard: %s at %s",str(e), str(exc_tb.tb_lineno))

class GetQuizResultAPI(APIView):

    def post(self, request, *args, **kwargs):
        response = {}
        response["status_code"] = 500
        try:
            allow_access = False
            authkey = request.data["authkey"]
            if is_user_authenticated(request) and request.user.role == "2":
                allow_access = True
            elif is_valid_authentication_key(authkey):
                allow_access = True

            if allow_access:
                data = request.data
                # print(data)
                applicant_id = data["student_id"]
                attempted_quiz_status_id = data["quiz_config_id"]
                applicant_obj = Applicant.objects.get(pk=int(applicant_id))
                quiz_status_obj = QuizStatus.objects.get(
                    pk=int(attempted_quiz_status_id))

                generate_applicant_quiz_result(applicant_obj,
                                               quiz_status_obj.quiz,
                                               QuizResult)

                quiz_result_obj = QuizResult.objects.get(applicant=applicant_obj,
                                                         quiz=quiz_status_obj.quiz)
                quiz_result_problems_list = get_quiz_result_problems_list(applicant_obj,
                                                             quiz_status_obj.quiz)
                if len(quiz_status_obj.get_attempted_video_problem())>0:
                     response["recruiter_remark"] = quiz_result_obj.recruiter_remark
                else:
                    response["recruiter_remark"] = -1
                quiz_result = json.loads(quiz_result_obj.result)
                quiz_result["applicant_percentile"] = quiz_result_obj.get_applicant_percentile()
                response["quiz_result"] = quiz_result
                response["status_code"] = 200
                response["status_message"] = "SUCCESS"
                response["problems_list"] = quiz_result_problems_list
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            logger.error("Error GetQuizResultAPI: %s at %s",
                         str(e), str(exc_tb.tb_lineno))

        return Response(data=response)


GetQuizResult = GetQuizResultAPI.as_view()


def MasterInstitutes(request):
    if is_user_authenticated(request) and request.user.role == "2":
        institutes_objs = Institute.objects.all()
        applicant_objs = Applicant.objects.all()
        no_applicants = []
        count = 0
        for institutes_obj in institutes_objs:
            for applicant_obj in applicant_objs:
                if(applicant_obj.college_name == institutes_obj):
                    count+=1
            no_applicants.append({
                "institutes": institutes_obj.name,
                "count":count
                })
            count = 0
        return render(request, "EasyHireApp/administrator/master_institutes.html", {
            "institutes_objs": institutes_objs,
            "applicant_objs":applicant_objs,
            "no_applicants":no_applicants
        })
    else:
        return redirect("/login")


def AddMasterInstitutes(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            name = data["name"]
            Institute.objects.create(name=name)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def DeactivateInstitute(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            institute = data["institute"]
            try:
                institute_obj = Institute.objects.get(name=institute)
                institute_obj.is_activated = False
                institute_obj.save()
            except Exception as e:
                print(e)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def ActivateInstitute(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            institute = data["institute"]
            try:
                institute_obj = Institute.objects.get(name=institute)
                institute_obj.is_activated = True
                institute_obj.save()
            except Exception as e:
                print(e)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)
"""
def MasterApplicants(request):
    if is_user_authenticated(request):
        #institutes_objs = Institute.objects.filter(is_activated=True)
        applicant_objs = Applicant.objects.all()
        stream_objs = Stream.objects.all()
        return render(request, "EasyHireApp/administrator/master-applicants.html", {
            #"institutes_objs": institutes_objs,
            "applicant_objs":applicant_objs,
            "stream_objs":stream_objs
        })
    else:
        return redirect("/login")
"""
def MasterApplicants(request):
    if is_user_authenticated(request):
        event_objs = Event.objects.all()
        applicant_objs = Applicant.objects.all()
        stream_objs = Stream.objects.all()
        return render(request, "EasyHireApp/administrator/master-applicants.html", {
            "event_objs":event_objs,
            "applicant_objs":applicant_objs,
            "stream_objs":stream_objs
        })
    else:
        return redirect("/login")

def saveFile(uploaded_file):
    file_content = ContentFile(uploaded_file.read())
    file_path = default_storage.save(uploaded_file.name, file_content)
    return file_path
"""
class CreateApplicantExcelAPI(APIView):

    permission_classes = (IsAuthenticated,)
    def post(self, request, *args, **kwargs):
        response = {}
        response["status"] = 500
        try:
            if is_user_authenticated(request):
                data = request.data
                uploaded_file = request.FILES.getlist('file')[0]
                logger.info("File %s", str(uploaded_file))

                institute_id = data["institute"]

                institute_obj = None
                try:
                    institute_obj = Institute.objects.get(pk=institute_id)
                    logger.info(
                        "CreateApplicantExcelAPI Found Institute %s", str(institute_obj))
                except:
                    logger.error(
                        "CreateApplicantExcelAPI Institute %s does not exist!", str(institute_obj))
                    return Response(data=response)

                stream_id = data["stream"]

                stream_obj = None
                try:
                    stream_obj = Stream.objects.get(pk=stream_id)
                    logger.info(
                        "CreateApplicantExcelAPI Found Stream %s", str(stream_obj))
                except:
                    logger.error(
                        "CreateApplicantExcelAPI Stream %s does not exist!", str(stream_obj))
                    return Response(data=response)

                adminstrator_obj = None
                try:
                    adminstrator_obj = Administrator.objects.get(username=request.user.username)
                    logger.info(
                        "CreateApplicantExcelAPI Employee uploading %s", str(adminstrator_obj))
                except:
                    logger.error(
                        "CreateApplicantExcelAPI Error getting employee")
                    return Response(data=response)

                file_extension = str(uploaded_file).split('.')[-1].lower()
                if(file_extension not in ["xlx", "xlsx"]):
                    logger.info("File Extension not allowed file=%s",
                                str(uploaded_file))
                    response["status"] = 301
                else:
                    try:
                        file_path = saveFile(uploaded_file)
                        logger.info("File Saved %s", str(file_path))
                        import_success, message = None, None

                        import_success, message = import_applicants_from_excel(file_path, stream_obj, institute_obj)
                        if import_success:
                            response["status"] = 200
                        else:
                            response["status"] = 302
                            response["message"] = message

                            logger.info("Some error occured while importing applicants from excel file=%s", str(
                                uploaded_file))
                    except Exception as e:
                        exc_type, exc_obj, exc_tb = sys.exc_info()
                        logger.error("Error CreateApplicantExcelAPI: %s at %s", str(
                            e), str(exc_tb.tb_lineno))

                # response["status"] = 200

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            logger.error("Error CreateApplicantExcelAPI: %s at %s",
                         str(e), str(exc_tb.tb_lineno))

        return Response(data=response)


CreateApplicantExcel = CreateApplicantExcelAPI.as_view()
"""

class CreateApplicantExcelAPI(APIView):

    permission_classes = (IsAuthenticated,)
    def post(self, request, *args, **kwargs):
        response = {}
        response["status"] = 500
        try:
            if is_user_authenticated(request):
                data = request.data
                uploaded_file = request.FILES.getlist('file')[0]
                logger.info("File %s", str(uploaded_file))

                event_id = data["event"]

                event_obj = None
                try:
                    event_obj = Event.objects.get(pk=int(event_id))
                    logger.info(
                        "CreateApplicantExcelAPI Found Event %s", str(event_obj))
                except:
                    logger.error(
                        "CreateApplicantExcelAPI Event %s does not exist!", str(event_obj))
                    return Response(data=response)

                stream_id = data["stream"]

                stream_obj = None
                try:
                    stream_obj = Stream.objects.get(pk=stream_id)
                    logger.info(
                        "CreateApplicantExcelAPI Found Stream %s", str(stream_obj))
                except:
                    logger.error(
                        "CreateApplicantExcelAPI Stream %s does not exist!", str(stream_obj))
                    return Response(data=response)

                adminstrator_obj = None
                try:
                    adminstrator_obj = Administrator.objects.get(username=request.user.username)
                    logger.info(
                        "CreateApplicantExcelAPI Employee uploading %s", str(adminstrator_obj))
                except:
                    logger.error(
                        "CreateApplicantExcelAPI Error getting employee")
                    return Response(data=response)

                file_extension = str(uploaded_file).split('.')[-1].lower()
                if(file_extension not in ["xlx", "xlsx"]):
                    logger.info("File Extension not allowed file=%s",
                                str(uploaded_file))
                    response["status"] = 301
                else:
                    try:
                        file_path = saveFile(uploaded_file)
                        logger.info("File Saved %s", str(file_path))
                        import_success, message = None, None

                        import_success, message = import_applicants_from_excel(file_path, stream_obj, event_obj)
                        if import_success:
                            response["status"] = 200
                        else:
                            response["status"] = 302
                            response["message"] = message

                            logger.info("Some error occured while importing applicants from excel file=%s", str(
                                uploaded_file))
                    except Exception as e:
                        exc_type, exc_obj, exc_tb = sys.exc_info()
                        logger.error("Error CreateApplicantExcelAPI: %s at %s", str(
                            e), str(exc_tb.tb_lineno))

                # response["status"] = 200

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            logger.error("Error CreateApplicantExcelAPI: %s at %s",
                         str(e), str(exc_tb.tb_lineno))

        return Response(data=response)


CreateApplicantExcel = CreateApplicantExcelAPI.as_view()


from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
def removeStopWords(sentence):
    stop_words = set(stopwords.words('english'))
    word_tokens = word_tokenize(sentence)
    filtered_sentence = [w for w in word_tokens if not w in stop_words]
    filtered_sentence = []
    for w in word_tokens:
        if w not in stop_words:
            filtered_sentence.append(w)
    return filtered_sentence

def CommonWords(A, B):
    str1_words = set(A)
    str2_words = set(B)
    common = str1_words & str2_words
    logger.info(common)
    return len(common)

class GetTextAnalysisOfAttemptedProblemAPI(APIView):

    permission_classes = (IsAuthenticated,)

    def post(self, request, *args, **kwargs):
        response = {}
        response["status_code"] = 500
        try:
            data = request.data
            attempted_problem_id = data["attempted_problem_id"]
            attempted_problem_obj = ProblemAttempted.objects.get(pk=int(attempted_problem_id))
            quiz_status_id = data["quiz_status_id"]
            quiz_status_obj = QuizStatus.objects.get(
                    pk=int(quiz_status_id))
            quiz_obj = quiz_status_obj.quiz
            applicant_id = data["applicant_id"]
            applicant_obj = Applicant.objects.get(pk=int(applicant_id))
            quiz_result_obj = QuizResult.objects.get(quiz=quiz_obj,
                                                    applicant=applicant_obj)
            #total_score = quiz_result_obj.generate_quiz_description_result()
            total_score = quiz_result_obj.generate_quiz_description_result()
            quiz_result_obj.description_score = total_score
            quiz_result_obj.save()
            solution = attempted_problem_obj.problem.solution
            answer = removeStopWords(attempted_problem_obj.answer)
            solution_list = removeStopWords(solution)
            common_words = CommonWords(solution_list, answer)
            '''try:
                score = (common_words/len(solution_list))*100
            except Exception as e:
                logger.error(e)
                score = 0'''
            score = attempted_problem_obj.calculated_score
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
            response["solution"] = solution
            response["common_words"] = common_words
            response["answer"] = attempted_problem_obj.answer
            response["score"] = round(score,2)
            #response["total_score"] = total_score
            # response["text_analysis"] = json.loads(attempted_problem_obj.text_analysis)
        except Exception as e:
            logger.error("SaveQuizConfigAPI: "+str(e))

        return Response(data=response)


GetTextAnalysisOfAttemptedProblem = GetTextAnalysisOfAttemptedProblemAPI.as_view()

class SaveModifiedScoreOfAttemptedProblemAPI(APIView):

    permission_classes = (IsAuthenticated,)

    def post(self, request, *args, **kwargs):
        response = {}
        response["status_code"] = 500
        try:
            data = request.data
            attempted_problem_id = int(data["attempted_problem_id"])
            quiz_status_id = int(data['quiz_status_id'])
            score = float(data['score'])
            print("in save api",score)
            attempted_problem_obj = ProblemAttempted.objects.get(pk=attempted_problem_id)
            attempted_problem_obj.calculated_score = score
            attempted_problem_obj.save()
            print(attempted_problem_obj.calculated_score)
            quiz_status_obj = QuizStatus.objects.get(pk=quiz_status_id)
            applicant_percentage = quiz_status_obj.generate_quiz_description_result()
            # print(applicant_score)
            quiz_status_obj.save()           
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
            response["score"] = round(score,2)
            response["applicant_percentage"] = applicant_percentage
            #response["total_score"] = total_score
            # response["text_analysis"] = json.loads(attempted_problem_obj.text_analysis)
        except Exception as e:
            logger.error("SaveQuizConfigAPI: "+str(e))

        return Response(data=response)


SaveModifiedScoreOfAttemptedProblem = SaveModifiedScoreOfAttemptedProblemAPI.as_view()


class SaveRemarksAPI(APIView):

    permission_classes = (IsAuthenticated,)

    def post(self, request, *args, **kwargs):
        response = {}
        response["status_code"] = 500
        try:
            data = request.data
            quiz_config_id = int(data["quiz_config_id"])
            applicant_id = int(data['student_id'])
            remarks = data["remarks"]
            print("in save api")
            print(remarks)
            quiz_status_obj = QuizStatus.objects.get(pk=quiz_config_id)
            print(quiz_status_obj)
            quiz_result_obj = QuizResult.objects.get(quiz=quiz_status_obj.quiz, applicant=quiz_status_obj.applicant)
            print(quiz_result_obj)
            quiz_result_obj.recruiter_remark = remarks
            print(quiz_result_obj.recruiter_remark)
            quiz_result_obj.save()
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        except Exception as e:
            logger.error("SaveRemarksAPI: "+str(e))
        print(response)
        return Response(data=response)


SaveRemarks = SaveRemarksAPI.as_view()


def get_value_or_na(input):
    if input == "" or input is None:
        return "N/A"
    return input

"""
def MasterStreams(request):
    if is_user_authenticated(request) and request.user.role == "2":
        stream_objs = Stream.objects.all()
        return render(request, "EasyHireApp/administrator/master_streams.html", {
            "stream_objs": stream_objs,
        })
    else:
        return redirect("/login")
"""
def MasterStreams(request):
    if is_user_authenticated(request) and request.user.role == "2":
        stream_objs = Stream.objects.all()
        applicant_objs = Applicant.objects.all()
        no_applicants = []
        count = 0
        for stream_obj in stream_objs:
            for applicant_obj in applicant_objs:
                if(applicant_obj.stream == stream_obj):
                    count+=1
            no_applicants.append({
                "stream": stream_obj.name,
                "count":count
                })
            count = 0
        return render(request, "EasyHireApp/administrator/master_streams.html", {
            "stream_objs": stream_objs,
            "no_applicants":no_applicants,
            #"applicant_objs":applicant_objs
        })
    else:
        return redirect("/login")

def AddMasterStreams(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            name = data["name"]
            Stream.objects.create(name=name)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def DeleteMasterStreams(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            stream_id = data["stream_id"]
            stream_obj = Stream.objects.get(pk=int(stream_id))
            stream_obj.delete()
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)


"""def DownloadApplicantReport(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)
            from xlwt import Workbook
            export_nps_wb = Workbook()
            sheet_name = "Applicant Results Sheet"
            sheet1 = export_nps_wb.add_sheet(
                sheet_name, cell_overwrite_ok=True)
            sheet1.write(0, 0, "Applicant Name")
            sheet1.write(0, 1, "Email")
            sheet1.write(0, 2, "Institute")
            sheet1.write(0, 3, "Graduation Year")
            sheet1.write(0, 4, "Score")
            sheet1.write(0, 5, "Percentile")
            sheet1.write(0, 6, "Sections Name")
            sheet1.write(0, 7, "Total Question")
            sheet1.write(0, 8, "Question Attempted")
            sheet1.write(0, 9, "Correct Answers")
            sheet1.write(0, 10, "Norm Score")
            index = 1
            for applicant_obj in applicant_objs:
                try:
                    sheet1.write(index, 0, applicant_obj.name)
                    sheet1.write(index, 1, applicant_obj.email_id)
                    sheet1.write(index, 2, applicant_obj.college_name)
                    sheet1.write(index, 3, applicant_obj.year_of_passing)
                    quiz_result_objs = list(
                        QuizResult.objects.filter(applicant=applicant_obj))
                    logger.info(quiz_result_objs)
                    ending_index = 0
                    flag = False
                    for quiz_result_obj in quiz_result_objs:

                        if quiz_result_obj.result == None:
                            continue

                        result = json.loads(quiz_result_obj.result)
                        total_sections = len(
                            result["quiz_section_result_list"])

                        sheet1.write(index, 4, result["applicant_total_score"])
                        sheet1.write(
                            index, 5, quiz_result_obj.get_applicant_percentile())
                        index_inner = 6
                        index_header = 11
                        for i in range(0, total_sections):
                            if i == 0:
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["section_name"])
                                index_inner += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["total_questions"])
                                index_inner += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["no_questions_attempted"])
                                index_inner += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["right_answers"])
                                index_inner += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["diff_score"])
                                index_inner += 1
                            else:
                                sheet1.write(0, index_header, "Sections Name")
                                index_header += 1
                                sheet1.write(0, index_header, "Total Question")
                                index_header += 1
                                sheet1.write(0, index_header,
                                             "Question Attempted")
                                index_header += 1
                                sheet1.write(0, index_header,
                                             "Correct Answers")
                                index_header += 1
                                sheet1.write(0, index_header, "Norm Score")
                                index_header += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["section_name"])
                                index_inner += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["total_questions"])
                                index_inner += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["no_questions_attempted"])
                                index_inner += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["right_answers"])
                                index_inner += 1
                                sheet1.write(
                                    index, index_inner, result["quiz_section_result_list"][i]["diff_score"])
                                index_inner += 1
                                flag = True
                                ending_index = index_header
                        if flag == True:
                            for quiz_result_obj in quiz_result_objs:
                                if quiz_result_obj.result == None:
                                    continue
                                result = json.loads(quiz_result_obj.result)
                                total_sections = len(
                                    result["quiz_section_result_list"])
                                if total_sections == 0:
                                    sheet1.write(0, ending_index, "Descriptive Score")
                                    sheet1.write(
                                        index, ending_index, quiz_result_obj.description_score)
                        flag = False
                        #quiz_obj = quiz_result_obj.quiz
                        #quiz_stauts_objs = QuizStatus.objects.filter(applicant=applicant_obj,quiz=quiz_obj)
                    index += 1
                except Exception as e:
                    index += 1
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    logger.error("Error DownloadApplicantReport:%s at %s", str(
                        e), str(exc_tb.tb_lineno))
                    pass

            filename = "applicant-score-sheet" + str(timezone.now()) + ".xls"
            export_nps_wb.save(settings.MEDIA_ROOT + filename)
            path_to_file = settings.MEDIA_ROOT + str(filename)
            response['file_url'] = "/files/" + str(filename)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error DownloadApplicantReport: %s at %s",
                     str(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)
"""

"""def DownloadApplicantReport(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)

            from xlwt import Workbook
            export_nps_wb = Workbook()
            sheet_name = "Applicant Results Sheet"

            sheet1 = export_nps_wb.add_sheet(
                sheet_name, cell_overwrite_ok=True)

            sheet1.write(0, 0, "Applicant Name")
            sheet1.write(0, 1, "Email")
            sheet1.write(0, 2, "Institute")
            sheet1.write(0, 3, "Graduation Year")
            sheet1.write(0, 4, "Section Name")
            sheet1.write(0, 5, "Score")
            sheet1.write(0, 6, "Total Question")
            sheet1.write(0, 7, "Question Attempted")
            sheet1.write(0, 8, "Correct Answer")
            row = 1
            for applicant_obj in applicant_objs:
                try:
                    quiz_status_objs = QuizStatus.objects.filter(
                        applicant=applicant_obj)
                    for quiz_status_obj in quiz_status_objs:
                        sheet1.write(row, 0, applicant_obj.name)
                        sheet1.write(row, 1, applicant_obj.email_id)
                        sheet1.write(row, 2, applicant_obj.college_name)
                        sheet1.write(row, 3, applicant_obj.year_of_passing)
                        quiz_result_obj = []
                        try:
                            quiz_result_obj = QuizResult.objects.get(applicant=applicant_obj,
                                                                     quiz=quiz_status_obj.quiz)
                            if quiz_result_obj.result == None:
                                continue
                            result = json.loads(quiz_result_obj.result)
                            total_sections = len(
                                result["quiz_section_result_list"])
                            if total_sections == 0:
                                sheet1.write(row, 4, "Subjective")
                                sheet1.write(
                                    row, 5, quiz_result_obj.description_score)
                                row += 1
                            else:
                                for i in range(0, total_sections):
                                    sheet1.write(row, 0, applicant_obj.name)
                                    sheet1.write(
                                        row, 1, applicant_obj.email_id)
                                    sheet1.write(
                                        row, 2, applicant_obj.college_name)
                                    sheet1.write(
                                        row, 3, applicant_obj.year_of_passing)
                                    sheet1.write(
                                        row, 4, result["quiz_section_result_list"][i]["section_name"])
                                    sheet1.write(
                                        row, 5, result["quiz_section_result_list"][i]["diff_score"])
                                    sheet1.write(
                                        row, 6, result["quiz_section_result_list"][i]["total_questions"])
                                    sheet1.write(
                                        row, 7, result["quiz_section_result_list"][i]["no_questions_attempted"])
                                    sheet1.write(
                                        row, 8, result["quiz_section_result_list"][i]["right_answers"])
                                    row += 1
                        except Exception as e:
                            exc_type, exc_obj, exc_tb = sys.exc_info()
                            logger.error("Error DownloadApplicantReport:%s at %s", str(
                                e), str(exc_tb.tb_lineno))
                            pass
                            row += 1
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    logger.error("Error DownloadApplicantReport:%s at %s", str(
                        e), str(exc_tb.tb_lineno))
                    pass
            filename = "applicant-score-sheet" + str(timezone.now()) + ".xls"
            export_nps_wb.save(settings.MEDIA_ROOT + filename)
            path_to_file = settings.MEDIA_ROOT + str(filename)
            response['file_url'] = "/files/" + str(filename)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error DownloadApplicantReport: %s at %s",
                     str(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)
def DownloadApplicantReport(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)

            from xlwt import Workbook
            export_nps_wb = Workbook()
            sheet_name = "Applicant Results Sheet"

            sheet1 = export_nps_wb.add_sheet(
                sheet_name, cell_overwrite_ok=True)

            sheet1.write(0, 0, "Applicant Registration")
            sheet1.write(0, 1, "Applicant Name")
            sheet1.write(0, 2, "Email")
            sheet1.write(0, 3, "Institute")
            sheet1.write(0, 4, "Graduation Year")
            sheet1.write(0, 5, "Attempted Date")
            sheet1.write(0, 6, "Section Name")
            sheet1.write(0, 7, "Score")
            sheet1.write(0, 8, "Total Question")
            sheet1.write(0, 9, "Question Attempted")
            sheet1.write(0, 10, "Correct Answer")
            row = 1
            for applicant_obj in applicant_objs:
                try:
                    quiz_status_objs = QuizStatus.objects.filter(
                        applicant=applicant_obj)
                    for quiz_status_obj in quiz_status_objs:
                        sheet1.write(row, 0, str(
                            applicant_obj.date_joined.strftime("%d-%m-%Y %H:%M %p")))
                        sheet1.write(row, 1, applicant_obj.name)
                        sheet1.write(row, 2, applicant_obj.email_id)
                        sheet1.write(row, 3, applicant_obj.college_name)
                        sheet1.write(row, 4, applicant_obj.year_of_passing)
                        sheet1.write(row, 5, str(
                            applicant_obj.attempted_datetime.strftime("%d-%m-%Y %H:%M %p")))
                        quiz_result_obj = []
                        try:
                            quiz_result_obj = QuizResult.objects.get(applicant=applicant_obj,
                                                                     quiz=quiz_status_obj.quiz)
                            if quiz_result_obj.result == None:
                                continue
                            result = json.loads(quiz_result_obj.result)
                            total_sections = len(
                                result["quiz_section_result_list"])
                            if total_sections == 0:
                                sheet1.write(row, 6, "Subjective")
                                sheet1.write(
                                    row, 7, quiz_result_obj.description_score)
                                row += 1
                            else:
                                for i in range(0, total_sections):
                                    sheet1.write(row, 0, str(
                                        applicant_obj.date_joined.strftime("%d-%m-%Y %H:%M %p")))
                                    sheet1.write(row, 1, applicant_obj.name)
                                    sheet1.write(
                                        row, 2, applicant_obj.email_id)
                                    sheet1.write(
                                        row, 3, applicant_obj.college_name)
                                    sheet1.write(
                                        row, 4, applicant_obj.year_of_passing)
                                    sheet1.write(
                                        row, 5, str(applicant_obj.attempted_datetime.strftime("%d-%m-%Y %H:%M %p")))
                                    sheet1.write(
                                        row, 6, result["quiz_section_result_list"][i]["section_name"])
                                    sheet1.write(
                                        row, 7, result["quiz_section_result_list"][i]["diff_score"])
                                    sheet1.write(
                                        row, 8, result["quiz_section_result_list"][i]["total_questions"])
                                    sheet1.write(
                                        row, 9, result["quiz_section_result_list"][i]["no_questions_attempted"])
                                    sheet1.write(
                                        row, 10, result["quiz_section_result_list"][i]["right_answers"])
                                    row += 1
                        except Exception as e:
                            exc_type, exc_obj, exc_tb = sys.exc_info()
                            logger.error("Error DownloadApplicantReport:%s at %s", str(
                                e), str(exc_tb.tb_lineno))
                            pass
                            row += 1
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    logger.error("Error DownloadApplicantReport:%s at %s", str(
                        e), str(exc_tb.tb_lineno))
                    pass
            filename = "applicant-score-sheet" + str(timezone.now()) + ".xls"
            export_nps_wb.save(settings.MEDIA_ROOT + filename)
            path_to_file = settings.MEDIA_ROOT + str(filename)
            response['file_url'] = "/files/" + str(filename)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error DownloadApplicantReport: %s at %s",
                     str(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)"""

def DownloadApplicantReport(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)

            from xlwt import Workbook
            export_nps_wb = Workbook()
            sheet_name = "Applicant Profile Sheet"

            sheet1 = export_nps_wb.add_sheet(
                sheet_name, cell_overwrite_ok=True)
            
            sheet2 = export_nps_wb.add_sheet(
                "Applicant Results Sheet", cell_overwrite_ok=True)
            
            i=0
            sheet1.write(0, i, "Applicant ID")
            i+=1
            sheet1.write(0, i, "Applicant Name")
            i+=1
            sheet1.write(0, i, "Email")
            i+=1
            sheet1.write(0, i, "Contact Number")
            i+=1
            sheet1.write(0, i, "Date of birth")
            i+=1
            sheet1.write(0, i, "Gender")
            i+=1
            sheet1.write(0, i, "Location")
            i+=1
            sheet1.write(0, i, "Institute")
            i+=1
            sheet1.write(0, i, "Stream")
            i+=1
            sheet1.write(0, i, "Specialization")
            i+=1
            sheet1.write(0, i, "Percentage")
            i+=1
            sheet1.write(0, i, "Graduation Year")
            i+=1
            sheet1.write(0, i, "Interview Type")
            i+=1
            sheet1.write(0, i, "Event")
            i+=1
            sheet1.write(0, i, "Adhar Number")
            i+=1
            sheet1.write(0, i, "Pan Number")
            i+=1
            sheet1.write(0, i, "Current Company")
            i+=1
            sheet1.write(0, i, "Current Designation")
            i+=1
            sheet1.write(0, i, "Current CTC")
            i+=1
            sheet1.write(0, i, "Quiz name (Completed Time)")
            i+=1
            sheet1.write(0, i, "Quiz score")
            i+=1

            sheet2.write(0, 0, "Applicant Name")
            sheet2.write(0, 1, "Quiz Name (completed on)")
            sheet2.write(0, 2, "Quiz score below name")

            row = 1
            row2 = 1
            for applicant_obj in applicant_objs:
                i=0
                sheet1.write(row, i, get_value_or_na(applicant_obj.applicant_id))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.name))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.email_id))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.phone_number))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.dob))
                i+=1
                if get_value_or_na(applicant_obj.gender) == "N/A":
                    sheet1.write(row, i, "N/A")
                elif applicant_obj.gender == "1":
                    sheet1.write(row, i, "Male")
                elif applicant_obj.gender == "2":
                    sheet1.write(row, i, "Female")
                else:
                    sheet1.write(row, i, "Other")
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.location))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.college_name))
                i+=1
#                sheet1.write(row, i, get_value_or_na(applicant_obj.stream.name))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.specialization))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.percentage))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.year_of_passing))
                i+=1
                if get_value_or_na(applicant_obj.category) =="N/A":
                    sheet1.write(row, i, "N/A")
                elif applicant_obj.category == "1":
                    sheet1.write(row, i, "Campus")
                elif applicant_obj.gender == "2":
                    sheet1.write(row, i, "Walk-in")
                else:
                    sheet1.write(row, i, "Posting")
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.event.name))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.id_proof_adhaar_number))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.id_proof_pan_number))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.current_company))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.current_designation))
                i+=1
                sheet1.write(row, i, get_value_or_na(applicant_obj.current_ctc))
                i+=1

                sheet2.write(row2, 0, get_value_or_na(applicant_obj.name))

                try:
                    quiz_status_objs = QuizStatus.objects.filter(
                        applicant=applicant_obj)
                    
                    i2=1
                    
                    for quiz_status_obj in quiz_status_objs:
                        try:
                            quiz_result_obj = QuizResult.objects.get(applicant=applicant_obj,
                                                                     quiz=quiz_status_obj.quiz)
                            if quiz_result_obj.result == None:
                                continue
                            result = json.loads(quiz_result_obj.result)
                            sheet1.write(row, i, quiz_status_obj.quiz.title + ' (' + str(quiz_status_obj.completion_date) + ')')
                            i+=1
                            sheet1.write(row, i, result['applicant_total_score'])
                            i+=1

                            sheet2.write(row2, i2, quiz_status_obj.quiz.title + ' (' + str(quiz_status_obj.completion_date) + ')')
                            sheet2.write(row2+1, i2, result['applicant_total_score'])
                            i2 += 1

                        except Exception as e:
                            exc_type, exc_obj, exc_tb = sys.exc_info()
                            logger.error("Error DownloadApplicantReport:%s at %s", str(
                                e), str(exc_tb.tb_lineno))
                            pass
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    logger.error("Error DownloadApplicantReport:%s at %s", str(
                        e), str(exc_tb.tb_lineno))
                    pass
                row += 1
                row2 += 2

            filename = "applicant-score-sheet" + str(timezone.now()) + ".xls"
            export_nps_wb.save(settings.MEDIA_ROOT + filename)
            path_to_file = settings.MEDIA_ROOT + str(filename)
            response['file_url'] = "/files/" + str(filename)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error DownloadApplicantReport: %s at %s",
                     str(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)




def SaveApplicantAtIRecruit(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            applicant_objs = get_applicant_objs_from_applicant_id_list(
                data["selected_applicant_id_list"], Applicant)
            for applicant_obj in applicant_objs:
                try:
                    push_applicant_data_at_irecruit(applicant_obj)
                except Exception as e:
                    logger.error("Can not push at iRecruit")
                    pass
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error SaveApplicantAtIRecruit: %s at %s",
                        str(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def MasterAdministrator(request):
    if is_user_authenticated(request) and request.user.role == "2":
        administrator_objs = Administrator.objects.filter(role="3")
        print(administrator_objs)
        return render(request, "EasyHireApp/administrator/create-administrator.html",{"administrator_objs":administrator_objs})
    else:
        return redirect("/login")

def CreateAdministrator(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            username = data["username"]
            try:
                User.objects.get(username=username)
                response["status_code"]= 301
            except Exception:
                name = data["name"]
                email = data["email"]
                password = data["password"]
                administator_obj = Administrator.objects.create(username=username,
                                            first_name=name,
                                            email=email,
                                            role="3")
                administator_obj.set_password(password)
                administator_obj.administrator_id = administator_obj.pk
                administator_obj.save()
                response["status_code"] = 200
                response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error CreateAdministrator: %s at %s",
                        str(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def DeactivateAdministrator(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            administrator_id = data["administrator_id"]
            try:
                administator_obj = Administrator.objects.get(pk=int(administrator_id))
                administator_obj.is_active = False
                administator_obj.save()
            except Exception as e:
                print(e)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def ActivateAdministrator(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            administrator_id = data["administrator_id"]
            try:
                administator_obj = Administrator.objects.get(pk=int(administrator_id))
                administator_obj.is_active = True
                administator_obj.save()
            except Exception as e:
                print(e)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def MasterEvents(request):
    if is_user_authenticated(request) and request.user.role == "2":
        event_objs = Event.objects.all()
        applicant_objs = Applicant.objects.all()
        no_applicants = []
        count = 0
        for event_obj in event_objs:
            for applicant_obj in applicant_objs:
                if(applicant_obj.event == event_obj):
                    count+=1
            no_applicants.append({
                "event": event_obj.name,
                "count":count
                })
            count = 0
        quiz_section_objs = QuizSection.objects.all()
        return render(request, "EasyHireApp/administrator/master_events.html", {
            "event_objs": event_objs,
            "no_applicants":no_applicants,
            #"applicant_objs":applicant_objs,
            "quiz_section_objs":quiz_section_objs
        })
    else:
        return redirect("/login")

def AddMasterEvents(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            name = data["name"]
            """
            quiz_id = data["event_quiz"]
            quiz_section_obj = QuizSection.objects.get(pk=int(quiz_id))
            Event.objects.create(name=name, quiz_section=quiz_section_obj)
            """
            event_obj = Event.objects.create(name=name)
            quiz_ids = data["event_quiz"]
            quiz_section_obj = []
            for quiz_id in quiz_ids:
                quiz_section_obj = QuizSection.objects.get(pk=int(quiz_id))
                event_obj.quiz_section.add(quiz_section_obj)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        logger.error("AddMasterEvent %s",e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def DeleteMasterEvents(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            event_id = data["event_id"]
            event_obj = Event.objects.get(pk=int(event_id))
            event_obj.delete()
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def MasterDepartments(request):
    if is_user_authenticated(request) and request.user.role == "2":
        department_objs = Department.objects.all()
        applicant_objs = Applicant.objects.all()
        no_applicants = []
        count = 0
        for department_obj in department_objs:
            for applicant_obj in applicant_objs:
                if(applicant_obj.department == department_obj):
                    count+=1
            no_applicants.append({
                "department": department_obj.name,
                "count":count
                })
            count = 0
        return render(request, "EasyHireApp/administrator/manage_departments.html", {
            "department_objs": department_objs,
            "no_applicants":no_applicants,
            #"applicant_objs":applicant_objs
        })
    else:
        return redirect("/login")

def AddMasterDepartments(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            name = data["name"]
            Department.objects.create(name=name)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def DeleteMasterDepartments(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            department_id = data["department_id"]
            department_obj = Department.objects.get(pk=int(department_id))
            department_obj.delete()
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        logger.error(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

"""
def EditMasterEvents(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            event_id = data["event_id"]
            quiz_id = data["event_quiz"]
            quiz_section_obj = QuizSection.objects.get(pk=int(quiz_id))
            logger.info(quiz_section_obj)
            event_obj = Event.objects.get(pk=int(event_id))
            logger.info(event_obj)
            event_obj.quiz_section = quiz_section_obj
            event_obj.save()
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        logger.error("EditEvent %s",e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)
"""
def EditMasterEvents(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            event_id = data["event_id"]
            event_obj = Event.objects.get(pk=int(event_id))
            event_obj.quiz_section.clear()
            #quiz_section_obj = QuizSection.objects.get(pk=int(quiz_id))
            quiz_ids = data["event_quiz"]
            quiz_section_obj = []
            for quiz_id in quiz_ids:
                quiz_section_obj = QuizSection.objects.get(pk=int(quiz_id))
                event_obj.quiz_section.add(quiz_section_obj)
            event_obj.save()
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)


def GetQuizSectionList(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        data = request.POST["data"]
        data = json.loads(data)
        event_id = data["event_id"]
        event_obj = Event.objects.get(pk=int(event_id))
        quiz_section_objs = event_obj.quiz_section.all()
        quiz_section_list = []
        quiz_section_id_list = []
        for quiz_section_obj in quiz_section_objs:
            quiz_section_list.append(quiz_section_obj.quiz.title)
            quiz_section_id_list.append(quiz_section_obj.pk)
        response["event_id"] = quiz_section_id_list
        response["quiz_section"] = quiz_section_list
        response["status_code"] = 200
    except Exception as e:
        logger.error(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)


def ActivateEvent(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            event_id = data["event_id"]
            try:
                event_obj = Event.objects.get(pk=int(event_id))
                event_obj.is_activated = True
                event_obj.save()
            except Exception as e:
                logger.error(e)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        logger.error(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

def DeactivateEvent(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            event_id = data["event_id"]
            try:
                event_obj = Event.objects.get(pk=int(event_id))
                event_obj.is_activated = False
                event_obj.save()
            except Exception as e:
                logger.error(e)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        logger.error(e)

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)
"""
def DownloadEventExcel(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            event_id = data["event_id"]
            event_obj = Event.objects.filter(pk=int(event_id))
            applicant_objs = Applicant.objects.filter(event=event_obj[0])
            quiz_attempted = 0
            from xlwt import Workbook
            export_nps_wb = Workbook()
            sheet_name = "Event Sheet"
            sheet1 = export_nps_wb.add_sheet(sheet_name)
            sheet1.write(0, 0, "Event")
            sheet1.write(0, 1, "Qualification")
            sheet1.write(0, 2, "Total Applicant")
            sheet1.write(0, 3, "Quiz Attempted")
            sheet1.write(0, 4, "Quiz Pending")
            sheet1.write(0, 5, "Avg. Score")
            index = 1
            quiz_section_objs = event_obj[0].quiz_section.all()
            try:
                for quiz_section_obj in quiz_section_objs:
                    sheet1.write(index, 0,event_obj[0].name)
                    sheet1.write(index, 1,quiz_section_obj.quiz.title)
                    total_applicant_objs = QuizSectionResult.objects.filter(quiz_section=quiz_section_obj)
                    sheet1.write(index, 2,len(total_applicant_objs))
                    quiz_section_results = QuizSectionResult.objects.filter(quiz_section=quiz_section_obj)
                    quiz_completed = 0
                    quiz_pending = 0
                    for quiz_section_result in quiz_section_results:
                        if quiz_section_result.is_completed == True:
                            quiz_completed += 1
                        else:
                            quiz_pending +=1
                    sheet1.write(index, 3,quiz_completed)
                    sheet1.write(index, 4,quiz_pending)

                    quiz_result_objs = QuizResult.objects.filter(quiz=quiz_section_obj.quiz)
                    total_appliant_quiz = len(quiz_result_objs)
                    average_result = 0.0
                    total_score = 0.0
                    for quiz_result_obj in quiz_result_objs:
                        try:
                            json_result = json.loads(quiz_result_obj.result)
                        except Exception:
                            pass
                        score = float(json_result['applicant_total_score'])
                        score = round(score,2)
                        total_score += score
                    try:
                        average_result = float(total_score/float(total_appliant_quiz))
                    except Exception as e:
                        average_result = 0.0
                    print(average_result)
                    sheet1.write(index, 5,float(average_result))
                    index = index + 1
            except Exception as e:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                logger.error("Error DownloadEventExcel:%s at %s",str(e), str(exc_tb.tb_lineno))
                index+=1
                pass

            filename = "event-excel-sheet" + str(timezone.now()) +".xls"
            export_nps_wb.save(settings.MEDIA_ROOT +  filename)
            path_to_file = settings.MEDIA_ROOT + str(filename)
            print(path_to_file)
            response['file_url'] = "/files/" + str(filename)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error DownloadEventExcel: %s at %s",
                        str(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)

"""
def DownloadEventExcel(request):
    response = {
        "status_code": 500,
        "status_message": "Internal Server Error"
    }
    try:
        if is_user_authenticated(request) and request.user.role == "2":
            data = request.POST["data"]
            data = json.loads(data)
            event_id = data["event_id"]
            event_obj = Event.objects.filter(pk=int(event_id))
            applicant_objs = Applicant.objects.filter(event=event_obj[0])
            quiz_attempted = 0
            from xlwt import Workbook
            export_nps_wb = Workbook()
            sheet_name = "Event Sheet"
            sheet1 = export_nps_wb.add_sheet(sheet_name)
            sheet1.write(0, 0, "Event")
            sheet1.write(0, 1, "Qualification")
            sheet1.write(0, 2, "Total Applicant")
            sheet1.write(0, 3, "Quiz Attempted")
            sheet1.write(0, 4, "Quiz Pending")
            sheet1.write(0, 5, "Avg. Score")
            index = 1
            quiz_section_objs = event_obj[0].quiz_section.all()
            try:
                for quiz_section_obj in quiz_section_objs:
                    sheet1.write(index, 0,event_obj[0].name)
                    sheet1.write(index, 1,quiz_section_obj.quiz.title)
                    applicant_objs = Applicant.objects.filter(event=event_obj[0])
                    quiz_section_result_objs = QuizSectionResult.objects.filter(quiz_section=quiz_section_obj)
                    total_applicants = 0
                    quiz_completed = 0
                    quiz_pending = 0
                    average_result = 0.0
                    total_score = 0.0
                    json_result = ""
                    for quiz_section_result_obj in quiz_section_result_objs:
                        for applicant_obj in applicant_objs:
                            if quiz_section_result_obj.applicant.pk == applicant_obj.pk:
                                total_applicants = total_applicants + 1
                    sheet1.write(index, 2,total_applicants)
                    for quiz_section_result_obj in quiz_section_result_objs:
                        for applicant_obj in applicant_objs:
                            if quiz_section_result_obj.applicant.pk == applicant_obj.pk:
                                print(applicant_obj)
                                quiz_pending = 0
                                if quiz_section_result_obj.is_completed == True:
                                    quiz_completed += 1
                            try:
                                quiz_result_obj = QuizResult.objects.get(quiz=quiz_section_result_obj.quiz_section.quiz,applicant = quiz_section_result_obj.applicant)
                                average_result = 0.0
                                total_score = 0.0
                                try:
                                    json_result = json.loads(quiz_result_obj.result)
                                except Exception:
                                    pass
                                score = float(json_result['applicant_total_score'])
                                score = round(score,2)
                                total_score += score
                                try:
                                    average_result = float(float(total_score)/float(total_appliant_quiz))
                                except Exception as e:
                                    average_result = 0.0
                            except Exception:
                                pass
                    sheet1.write(index, 3,quiz_completed)
                    sheet1.write(index, 4,(total_applicants-quiz_completed))
                    # quiz_result_objs = QuizResult.objects.filter(quiz=quiz_section_obj.quiz)
                    # total_appliant_quiz = len(quiz_result_objs)
                    sheet1.write(index, 5,float(average_result))
                    index = index + 1
            except Exception as e:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                logger.error("Error DownloadEventExcel:%s at %s",str(e), str(exc_tb.tb_lineno))
                index+=1
                pass

            filename = "event-excel-sheet.xls"
            export_nps_wb.save(settings.MEDIA_ROOT +  filename)
            path_to_file = settings.MEDIA_ROOT + str(filename)
            print(path_to_file)
            response['file_url'] = "/files/" + str(filename)
            response["status_code"] = 200
            response["status_message"] = "SUCCESS"
        else:
            response["status_code"] = 404
            response["status_message"] = "Invalid Access"
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logger.error("Error DownloadEventExcel: %s at %s",
                        str(e), str(exc_tb.tb_lineno))

    return HttpResponse(json.dumps(response), content_type=CONTENT_TYPE_JSON)


